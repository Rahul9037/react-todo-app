{"version":3,"sources":["Firebase/firebase.js","Todo/Todo.js","App.js","serviceWorker.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","Todo","todo","List","className","ListItem","ListItemAvatar","Avatar","ListItemText","primary","secondary","timestamp","toDate","toString","onClick","event","collection","doc","id","delete","App","useState","todos","setTodos","input","setInput","useEffect","unsubscribe","orderBy","onSnapshot","snapShot","docs","map","data","FormControl","InputLabel","role","aria-label","Input","type","value","onChange","e","target","Button","disabled","variant","color","console","log","preventDefault","add","FieldValue","serverTimestamp","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+UAgBiBA,EAHKC,IAASC,cAXR,CACnBC,OAAQ,0CACRC,WAAY,mCACZC,YAAa,0CACbC,UAAW,mBACXC,cAAe,+BACfC,kBAAmB,gBACnBC,MAAO,6CACPC,cAAe,iBAIMC,Y,gFCUVC,MAjBf,YAAuB,IAARC,EAAO,EAAPA,KAEb,OACI,kBAACC,EAAA,EAAD,CAAMC,UAAU,cACd,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAAC,IAAD,QAGJ,kBAACC,EAAA,EAAD,CAAcC,QAASP,EAAKA,KAAMQ,UAAWR,EAAKS,UAAYT,EAAKS,UAAUC,SAASC,WAAa,MAErG,kBAAC,IAAD,CAAYC,QAAS,SAAAC,GAAK,OAAI1B,EAAG2B,WAAW,SAASC,IAAIf,EAAKgB,IAAIC,cC2C3DC,MAtDf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,OAEaF,mBAAS,IAFtB,mBAENG,EAFM,KAECC,EAFD,KA+Bb,OA3BAC,qBAAU,WACR,IAAMC,EAActC,EAAG2B,WAAW,SAASY,QAAQ,YAAY,QAC1CC,YAAY,SAAAC,GAAQ,OACnBP,EAASO,EAASC,KAAKC,KACrB,SAAAf,GAAG,MAAK,CACNC,GAAKD,EAAIC,GACThB,KAAOe,EAAIgB,OAAO/B,KAClBS,UAAYM,EAAIgB,OAAOtB,kBAGjD,OAAO,WACLgB,OAED,IAeD,yBAAKvB,UAAU,OACb,4CACA,8BACE,kBAAC8B,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KAAY,0BAAMC,KAAK,MAAMC,aAAW,IAA5B,UAAZ,iBACA,kBAACC,EAAA,EAAD,CAAOC,KAAK,OAAOC,MAAOhB,EAAOiB,SAAU,SAACC,GAAD,OAAQjB,EAASiB,EAAEC,OAAOH,WAEvE,kBAACI,EAAA,EAAD,CAAQC,UAAWrB,EAAOsB,QAAQ,YAAYC,MAAM,UAAUR,KAAK,SAASzB,QApBlE,SAAC4B,GACfM,QAAQC,IAAI3B,GACZoB,EAAEQ,iBACF7D,EAAG2B,WAAW,SAASmC,IAAI,CACzBjD,KAAOsB,EACPb,UAAYrB,IAASU,UAAUoD,WAAWC,oBAE5C5B,EAAS,MAaL,aAIF,4BAEIH,EAAMU,KAAI,SAAA9B,GACR,OAAO,kBAAC,EAAD,CAAMoD,IAAKpD,EAAKgB,GAAIhB,KAAMA,UC1CzBqD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxB,QAAQwB,MAAMA,EAAMC,c","file":"static/js/main.0b4edb36.chunk.js","sourcesContent":["import firebase from 'firebase';\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyBAc-3NPXe7mW4qTbK0d_xAyEvRxClbsLs\",\n    authDomain: \"react-todo-3bfee.firebaseapp.com\",\n    databaseURL: \"https://react-todo-3bfee.firebaseio.com\",\n    projectId: \"react-todo-3bfee\",\n    storageBucket: \"react-todo-3bfee.appspot.com\",\n    messagingSenderId: \"1083505703479\",\n    appId: \"1:1083505703479:web:f46104fe3557b357639db2\",\n    measurementId: \"G-L2DN7H9X8H\"\n  };\n\n  const firebaseApp = firebase.initializeApp(firebaseConfig);\n  const db = firebaseApp.firestore();\n\n  export default db;","import React from \"react\";\nimport { List, ListItem, ListItemAvatar, Avatar, ListItemText, Button } from '@material-ui/core';\nimport AssignmentIcon from '@material-ui/icons/Assignment';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport db from '../Firebase/firebase';\nimport './Todo.css';\n\nfunction Todo({todo}) {\n  \n  return (\n      <List className=\"todo__list\">\n        <ListItem>\n          <ListItemAvatar>\n            <Avatar>\n              <AssignmentIcon/>\n            </Avatar>\n          </ListItemAvatar>\n          <ListItemText primary={todo.todo} secondary={todo.timestamp ? todo.timestamp.toDate().toString() : ''} />\n        </ListItem>\n        <DeleteIcon onClick={event => db.collection('todos').doc(todo.id).delete()}/>\n      </List>\n  );\n}\n\nexport default Todo;\n","import React, { useState, useEffect } from 'react';\nimport Button from '@material-ui/core/Button';\nimport './App.css';\nimport { FormControl, InputLabel, Input } from '@material-ui/core';\nimport db from './Firebase/firebase';\nimport Todo from './Todo/Todo';\nimport firebase from 'firebase';\n\nfunction App() {\n  const [todos, setTodos] = useState([]);\n  const [input, setInput] = useState('');\n\n  useEffect(() => { \n    const unsubscribe = db.collection('todos').orderBy('timestamp','desc')\n                        .onSnapshot( snapShot => \n                          setTodos(snapShot.docs.map(\n                            doc => ({\n                              id : doc.id,\n                              todo : doc.data().todo,\n                              timestamp : doc.data().timestamp\n                            })\n                          )))\n    return () => {\n      unsubscribe();\n    }\n  }, [])\n\n  const addTodo = (e) => {\n    console.log(todos)\n    e.preventDefault();\n    db.collection('todos').add({\n      todo : input,\n      timestamp : firebase.firestore.FieldValue.serverTimestamp()\n    })\n    setInput('');\n  }\n\n\n\n  return (\n    <div className=\"App\">\n      <h1>Hii React!!!</h1>\n      <form>\n        <FormControl>\n          <InputLabel><span role=\"img\" aria-label=\"\">&#9989;</span> Write a Todo</InputLabel>\n          <Input type=\"text\" value={input} onChange={(e) => (setInput(e.target.value))} />\n        </FormControl>\n        <Button disabled={!input} variant=\"contained\" color=\"primary\" type=\"submit\" onClick={addTodo}>\n          Add Todo\n      </Button>\n      </form>\n      <ul>\n        {\n          todos.map(todo => {\n            return <Todo key={todo.id} todo={todo}/>\n          })\n        }\n      </ul>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}